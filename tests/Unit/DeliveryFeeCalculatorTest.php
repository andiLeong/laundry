<?php

namespace Tests\Unit;

use App\Models\Branch;
use App\Models\DeliveryFeeCalculator;
use App\Models\Place;
use Illuminate\Foundation\Testing\LazilyRefreshDatabase;
use Tests\TestCase;

class DeliveryFeeCalculatorTest extends TestCase
{
    use LazilyRefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->branch = Branch::factory()->create([
            'latitude' => 14.56580550,
            'longitude' => 121.01148240
        ]);
    }

//    /** @test */
//    public function it_can_calculate_distance(): void
//    {
//        $distance = (new FakeDeliveryFeeCalculator($this->freePlace(), $this->branch))->distance();
//        $this->assertEquals(259, $distance);
//    }

    /** @test */
    public function if_a_place_is_free_fee_is_zero()
    {
        $place = $this->notFreePlace();
        config()->set('delivery_fee.free', [$place->id]);
        $fee = (new DeliveryFeeCalculator($place, $this->branch))->calculate();
        $this->assertEquals(0, $fee);
    }

    /** @test */
    public function if_a_place_is_less_than_min_meter_its_free()
    {
        $fee = (new DeliveryFeeCalculator($this->freePlace(), $this->branch))->calculate();
        $this->assertEquals(0, $fee);
    }

    /** @test */
    public function if_a_place_distance_is_more_than_1000_meter_it_charge_60()
    {
        $fee = (new DeliveryFeeCalculator($this->oneThousandPlace(), $this->branch))->calculate();
        $this->assertEquals(60, $fee);
    }

    /** @test */
    public function if_a_place_distance_is_more_than_700_meter_it_charge_30()
    {
        $fee = (new DeliveryFeeCalculator($this->sevenHundredPlace(), $this->branch))->calculate();
        $this->assertEquals(30, $fee);
    }

    public function sevenHundredPlace()
    {
        return Place::factory()->create([
            'latitude' => 14.558907215378385,
            'longitude' => 121.00786415589747
        ]);
    }

    public function oneThousandPlace()
    {
        return Place::factory()->create([
            'latitude' => 14.554913143885797,
            'longitude' => 121.01684541412106
        ]);
    }

    public function notFreePlace()
    {
        return Place::factory()->create([
            'latitude' => 14.558762086607878,
            'longitude' => 121.00587509403779,
        ]);
    }

    public function freePlace()
    {
        return Place::factory()->create([
            'latitude' => 14.563716099999997,
            'longitude' => 121.0104251
        ]);
    }
}
