<?php

namespace Tests\Feature;

use App\Models\Order;
use App\Models\OrderInvoice;
use Illuminate\Foundation\Testing\LazilyRefreshDatabase;
use Tests\AdminAuthorization;
use Tests\TestCase;
use Tests\Validate;

class AdminCreateOrderInvoiceTest extends TestCase
{
    use LazilyRefreshDatabase;
    use AdminAuthorization;

    protected $endpoint = '/api/admin/order-invoice';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->order = Order::factory()->create();
    }

    /** @test */
    public function it_can_create_order_invoice_record(): void
    {
        $this->assertDatabaseCount('order_invoices', 0);
        $this->createOrderInvoice()->assertSuccessful();
        $this->assertDatabaseCount('order_invoices', 1);
    }

    /** @test */
    public function invoice_amount_either_order_total_amount_or_order_service_amount(): void
    {
        $order = Order::factory()->create([
            'total_amount' => 230,
            'amount' => 210
        ]);

        $amt = $order->total_amont + 100;
        $message = $this->createOrderInvoice([
            'amount' => $amt,
            'order_id' => $order->id
        ])->assertStatus(400)->json('message');
        $this->assertEquals($message, 'Amount ' . $amt . ' is not correct');
    }


    /** @test */
    public function order_id_must_be_exists(): void
    {
        $message = $this->createOrderInvoice([
            'order_id' => 9999999999999
        ])->assertStatus(400)->json('message');
        $this->assertEquals($message, 'Order id ' . 9999999999999 . ' is not exists');
    }

    /** @test */
    public function order_id_must_be_unique(): void
    {
        $invoice = OrderInvoice::factory()->create();
        $this->createOrderInvoice([
            'order_id' => $invoice->order_id
        ])->assertStatus(422)->assertJsonValidationErrorFor('order_id');
    }

    /** @test */
    public function invoice_id_is_required()
    {
        $name = 'invoice_id';
        $rule = ['required'];
        Validate::name($name)->against($rule)->through(
            fn($payload) => $this->createOrderInvoice($payload)
        );
    }

    /** @test */
    public function order_id_is_required()
    {
        $name = 'order_id';
        $rule = ['required'];
        Validate::name($name)->against($rule)->through(
            fn($payload) => $this->createOrderInvoice($payload)
        );
    }

    /** @test */
    public function amount_is_required()
    {
        $name = 'amount';
        $rule = ['required', 'integer'];
        Validate::name($name)->against($rule)->through(
            fn($payload) => $this->createOrderInvoice($payload)
        );
    }

    public function createOrderInvoice($overwrites = [])
    {
        $att = $this->attributes($overwrites);
        return $this->signInAsAdmin()->postJson($this->endpoint, $att);
    }

    private function attributes(mixed $overwrites)
    {
        $original = OrderInvoice::factory()->make([
            'order_id' => $this->order->id,
            'amount' => $this->order->total_amount
        ])->toArray();
        return array_merge($original, $overwrites);
    }
}
