<?php

namespace Tests\Feature;

use App\Models\OrderInvoice;
use Illuminate\Foundation\Testing\LazilyRefreshDatabase;
use Tests\AdminAuthorization;
use Tests\TestCase;

class AdminReadOrderInvoiceTest extends TestCase
{
    use LazilyRefreshDatabase;
    use AdminAuthorization;

    protected string $endpoint = 'api/admin/order-invoice';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->method = 'getJson';
        $this->invoice = OrderInvoice::factory(2)->create();
    }

    /** @test */
    public function it_can_read_invoice_data(): void
    {
        $ids = $this->fetch()->assertOk()->collect('data')->pluck('id');

        $this->assertTrue($ids->contains($this->invoice[0]->id));
        $this->assertTrue($ids->contains($this->invoice[1]->id));
    }

    /** @test */
    public function it_is_order_by_id(): void
    {
        $invoices = $this->fetch()->json('data');
        $invoice = OrderInvoice::all();

        $this->assertEquals($invoice->last()['id'], $invoices[0]['id']);
        $this->assertEquals($invoice->last()['id'] - 1, $invoices[1]['id']);
    }

    /** @test */
    public function it_can_filter_by_order_ids(): void
    {
        $invoices = OrderInvoice::factory(3)->create();
        $take = $invoices->take(2);
        $firstTwoInvoices = $take->pluck('order_id');
        $id = $take->pluck('id');
        $ids = $this->fetchIds(['order_id' => implode(',', $firstTwoInvoices->toArray())]);

        $this->assertTrue($ids->contains($id[0]));
        $this->assertTrue($ids->contains($id[1]));
        $this->assertFalse($ids->contains($invoices[2]->id));
    }

    /** @test */
    public function it_can_filter_by_invoice_ids(): void
    {
        $invoices = OrderInvoice::factory(3)->create();
        $take = $invoices->take(2);
        $firstTwoInvoices = $take->pluck('invoice_id');
        $id = $take->pluck('id');
        $ids = $this->fetchIds(['invoice_id' => implode(',', $firstTwoInvoices->toArray())]);

        $this->assertTrue($ids->contains($id[0]));
        $this->assertTrue($ids->contains($id[1]));
        $this->assertFalse($ids->contains($invoices[2]->id));
    }

    protected function fetch($query = [], $as = null)
    {
        return $this->fetchAsAdmin($query, $as);
    }

    public function fetchIds($query = [], $as = null)
    {
        return $this->fetch($query, $as)->collect('data')->pluck('id');
    }
}
