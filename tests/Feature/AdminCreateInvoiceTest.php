<?php

namespace Tests\Feature;

use App\Models\Invoice;
use App\Models\Order;
use App\Models\OrderInvoice;
use Illuminate\Foundation\Testing\LazilyRefreshDatabase;
use Tests\AdminAuthorization;
use Tests\TestCase;
use Tests\Validate;

class AdminCreateInvoiceTest extends TestCase
{
    use LazilyRefreshDatabase;
    use AdminAuthorization;

    protected $endpoint = '/api/admin/invoice';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->order = Order::factory()->create();
    }

    /** @test */
    public function it_can_create_order_invoice_record(): void
    {
        $this->assertDatabaseCount('order_invoices', 0);
        $this->assertDatabaseCount('invoices', 0);
        $this->createOrderInvoice()->assertSuccessful();
        $this->assertDatabaseCount('order_invoices', 1);
        $this->assertDatabaseCount('invoices', 1);
    }

    /** @test */
    public function order_id_must_be_exists(): void
    {
        $message = $this->createOrderInvoice([
            'order_id' => (string)9999999999999
        ])->assertStatus(400)->json('message');
        $this->assertEquals($message, 'Order Ids are not correct');
    }

    /** @test */
    public function order_id_count_must_be_the_same(): void
    {
        $message = $this->createOrderInvoice([
            'order_id' => '9999999999999,' . $this->order->id,
        ])->assertStatus(400)->json('message');
        $this->assertEquals($message, 'Order Ids are not correct');
    }

    /** @test */
    public function order_id_must_be_unique(): void
    {
        $invoice = OrderInvoice::factory()->create();
        $message = $this->createOrderInvoice([
            'order_id' => (string)$invoice->order_id
        ])->assertStatus(400)->json('message');

        $this->assertEquals($message, 'Order Ids are not correct');
    }

    /** @test */
    public function invoice_id_is_required()
    {
        $name = 'invoice_id';
        $rule = ['required', 'unique:invoice_id,App\Models\Invoice'];
        Validate::name($name)->against($rule)->through(
            fn($payload) => $this->createOrderInvoice($payload)
        );
    }

    /** @test */
    public function order_id_is_required()
    {
        $name = 'order_id';
        $rule = ['required', 'string'];
        Validate::name($name)->against($rule)->through(
            fn($payload) => $this->createOrderInvoice($payload)
        );
    }

    /** @test */
    public function amount_is_required()
    {
        $name = 'amount';
        $rule = ['required', 'integer'];
        Validate::name($name)->against($rule)->through(
            fn($payload) => $this->createOrderInvoice($payload)
        );
    }

    /** @test */
    public function name_is_required()
    {
        $name = 'name';
        $rule = ['required', 'string', 'max:255'];
        Validate::name($name)->against($rule)->through(
            fn($payload) => $this->createOrderInvoice($payload)
        );
    }

    /** @test */
    public function invoice_number_can_be_started_with_zero_(): void
    {
        $this->createOrderInvoice(['invoice_id' => '000025'])->assertSuccessful();

        $invoice = Invoice::where('invoice_id', '000025')->first();
        $this->assertNotNull($invoice);
        $this->assertEquals('000025', $invoice->invoice_id);
    }

    /** @test */
    public function if_submit_duplicated_order_ids_it_should_not_throw_400(): void
    {
        $this->createOrderInvoice(['order_id' => $this->order->id . ',' . $this->order->id])->assertSuccessful();
    }

    public function createOrderInvoice($overwrites = [])
    {
        $att = $this->attributes($overwrites);
        return $this->signInAsAdmin()->postJson($this->endpoint, $att);
    }

    private function attributes(mixed $overwrites)
    {
        $original = Invoice::factory()->make()->toArray();
        $original['order_id'] = (string)$this->order->id;
        return array_merge($original, $overwrites);
    }
}
