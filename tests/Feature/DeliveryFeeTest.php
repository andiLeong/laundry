<?php

namespace Tests\Feature;

use App\Models\Branch;
use App\Models\Place;
use Illuminate\Foundation\Testing\LazilyRefreshDatabase;
use Tests\TestAuthEndpoint;
use Tests\TestCase;

class DeliveryFeeTest extends TestCase
{
    use LazilyRefreshDatabase;
    use TestAuthEndpoint;

    protected $endpoint = '/api/place/delivery-fee';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->branch = Branch::factory()->create([
            'latitude' => 14.56580550,
            'longitude' => 121.01148240
        ]);
        $this->endpoint = $this->endpoint . '/' . $this->oneThousandPlace()->id;
        $this->user = $this->customer();
        $this->method = 'getJson';
    }

    /** @test */
    public function it_can_delivery_fee_from_branch_to_a_place(): void
    {
        $amount = $this->signIn($this->user)->getJson($this->endpoint)
            ->assertStatus(200)
            ->json('amount');

        $this->assertEquals(60, $amount);
    }

    /** @test */
    public function it_gets_404_if_place_not_found(): void
    {
        $message = $this->signIn($this->user)->getJson('/api/place/delivery-fee/9999999')
            ->assertStatus(404)
            ->json('message');

        $this->assertEquals('Place not found', $message);
    }

    public function oneThousandPlace()
    {
        return Place::factory()->create([
            'latitude' => 14.554913143885797,
            'longitude' => 121.01684541412106
        ]);
    }
}
